@page "/viewPeople"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@using System.Text
@using dashboard.Components.Account
@using dashboard.Components.Account.Shared
@using dashboard.Data
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> userManager
@inject IUserStore<ApplicationUser> userStore
@inject ApplicationDbContext dbContext;
@inject IJSRuntime js;
@attribute [Authorize(Roles = "admin")]
@attribute [StreamRendering]
<PageTitle>View people</PageTitle>
<h1>View People</h1>


<div class="row">
    <div class="col-md-4">
        <section>
                    <div class="form-floating mb-3">
                        @if(!Loaded) {

                            <div class="text-center">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        } else {
                            <InputSelect 
                            TValue="Guid"
                            Value="@CountryId"
                            ValueChanged="CountryValueChanged"
                            ValueExpression="@(() => CountryId)"
                            class="form-control" aria-required="true" >
                                <option value="@Guid.Empty">Select country</option>
                                @foreach(var country in AllCountries) {
                                    <option value="@country.Id">@country.Name</option>
                                }
                            </InputSelect>
                            <label for="country" class="form-label">Country</label>
                        }
                    </div>
                    <div class="form-floating mb-3">
                        @if(!Loaded) {
                            <div class="text-center">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        } else {
                            <InputSelect
                            TValue="Guid"
                            Value="@StoreId"
                            ValueChanged="StoreValueChanged"
                            ValueExpression="@(() => StoreId)"
                            class="form-control" >
                                @if(CountryId != Guid.Empty) {
                                    <option value="@Guid.Empty">Select Store</option>
                                    @foreach(var store in AllCountries.First(x => x.Id == CountryId).Stores) {
                                        <option value="@store.Id">@store.Name</option>
                                    }
                                }
                            </InputSelect>
                            <label for="store" class="form-label">Store</label>
                        }
                    </div>
        </section>
    </div>
</div>
<div class="row">
    <div class="col-md-8">
        @if (CountryId == Guid.Empty || StoreId == Guid.Empty) {
            <p>Awaiting to select both country and store...</p>
        } else {
            <table class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>First name</th>
                        <th>Last name</th>
                        <th>Modify user</th>
                        <th>Delete user</th>
                        <th>Promote/Demote</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var person in People) {
                        <tr>
                            <td>@person.Person.Id</td>
                            <td>@person.Person.FirstName</td>
                            <td>@person.Person.LastName</td>
                            <td>
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 20 20" data-bs-toggle="modal" data-bs-target="#id_@person.Person.Id" style="cursor: pointer;">
                                    <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"/>
                                    <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z"/>
                                </svg>

                                <!-- Modal -->
                                <div class="modal fade" id="id_@person.Person.Id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title" id="staticBackdropLabel">Modify person</h5>
                                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <div class="modal-body">
                                                <dl class="row">
                                                    <dt class="col-sm-3">FirstName</dt>
                                                    <dd class="col-sm-9">
                                                        <div class="form-floating mb-3">
                                                            <InputText class="form-control" @bind-Value="person.Person.FirstName"/>
                                                            <label for="firstName">First Name</label>
                                                        </div>
                                                    </dd>

                                                    <dt class="col-sm-3">LastName</dt>
                                                    <dd class="col-sm-9">
                                                        <div class="form-floating mb-3">
                                                            <InputText class="form-control" @bind-Value="person.Person.LastName"/>
                                                            <label for="lastName">Last Name</label>
                                                        </div>
                                                    </dd>

                                                    <dt class="col-sm-3">Country</dt>
                                                    <dd class="col-sm-9">
                                                        <div class="form-floating mb-3">
                                                             <InputSelect 
                                                                TValue="Guid"
                                                                Value="person.CountryId"
                                                                ValueExpression="@(() => person.CountryId)"
                                                                ValueChanged="person.CountryChanged"
                                                                class="form-control" aria-required="true" >
                                                                    @foreach(var country in AllCountries) {
                                                                        <option value="@country.Id">@country.Name</option>
                                                                    }
                                                                </InputSelect>
                                                                <label for="country" class="form-label">Country</label>
                                                        </div>
                                                    </dd>

                                                    <dt class="col-sm-3">Store</dt>
                                                    <dd class="col-sm-9">
                                                        <div class="form-floating mb-3">
                                                            <InputSelect 
                                                                @bind-Value="person.StoreId"
                                                                class="form-control" aria-required="true" >
                                                                    <option value="@Guid.Empty">Select store</option>
                                                                    @if(person.CountryId != Guid.Empty) {
                                                                         @foreach(var store in AllCountries.First(x => x.Id == person.CountryId).Stores) {
                                                                            <option value="@store.Id">@store.Name</option>
                                                                        }
                                                                    }
                                                                </InputSelect>
                                                                <label for="store" class="form-label">Store</label>
                                                        </div>
                                                    </dd>
                                                </dl>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-primary" @onclick="() => UpdatePerson(person)" data-bs-dismiss="modal">Save changes</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 20 20" data-bs-toggle="modal" data-bs-target="#id_delete_@person.Person.Id" style="cursor: pointer;">
                                    <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0"/>
                                </svg>

                                <!-- Modal -->
                                <div class="modal fade" id="id_delete_@person.Person.Id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title" id="staticBackdropLabel">Delete @person.Person.FirstName @person.Person.LastName?</h5>
                                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <div class="modal-body">
                                                <dl class="row">
                                                    <dt class="col-sm-3">Name</dt>
                                                    <dd class="col-sm-9">@person.Person.FirstName @person.Person.LastName</dd>
                                                </dl>
                                                <hr/>
                                                <span>
                                                    If you click <em>Proceed</em> the user and all the data related to him will be
                                                    deleted. Are you sure you want to delete this user?
                                                </span>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-primary" @onclick="() => Delete(person)" data-bs-dismiss="modal">Proceed</button>
                                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Abort</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <!-- If the user exists it means this is a person who can log -->
                                @if (person.Person.User != null) {
                                    <div class="col-mb-1">
                                        <button class="btn btn-danger w-100" data-bs-toggle="modal" data-bs-target="#id_demote_@person.Person.Id">Demote</button>
                                    </div>

                                    <!-- Modal -->
                                    <div class="modal fade" id="id_demote_@person.Person.Id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
                                        <div class="modal-dialog">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title" id="staticBackdropLabel">Demote @person.Person.FirstName @person.Person.LastName?</h5>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                </div>
                                                <div class="modal-body">
                                                    <dl class="row">
                                                        <dt class="col-sm-3">Name</dt>
                                                        <dd class="col-sm-9">@person.Person.FirstName @person.Person.LastName</dd>

                                                        <dt class="col-sm-3">Email</dt>
                                                        <dd class="col-sm-9">@person.Person.User.Email</dd>
                                                    </dl>
                                                    <hr/>
                                                    <span>
                                                        If you click <em>Proceed</em> the user will no longer be able to log in to the dashboard
                                                        and take logs of activities.
                                                    </span>
                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-primary" @onclick="() => Demote(person)" data-bs-dismiss="modal">Proceed</button>
                                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Abort</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                } else {
                                    <div class="col-mb-1">
                                        <button class="btn btn-info w-100" data-bs-toggle="modal" data-bs-target="#id_promote_@person.Person.Id">Promote</button>
                                    </div>

                                    <!-- Modal -->
                                    <div class="modal fade" id="id_promote_@person.Person.Id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
                                        <div class="modal-dialog">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title" id="staticBackdropLabel">Promote @person.Person.FirstName @person.Person.LastName?</h5>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                </div>
                                                <div class="modal-body">
                                                    <dl class="row">
                                                        <dt class="col-sm-3">Name</dt>
                                                        <dd class="col-sm-9">@person.Person.FirstName @person.Person.LastName</dd>

                                                        <dt class="col-sm-3">Email</dt>
                                                        <dd class="col-sm-9">
                                                            <div class="form-floating mb-3">
                                                                <InputText class="form-control" placeholder="john@gmail.com" @bind-Value="person.Email"/>
                                                                <label for="email" class="form-label">Email</label>
                                                            </div>
                                                            <div class="form-floating mb-3">
                                                                <InputText class="form-control" type="password" @bind-Value="person.Password" placeholder="Password"/>
                                                                <label for="email" class="form-label">password</label>
                                                            </div>
                                                        </dd>
                                                    </dl>
                                                    <hr/>
                                                    <span>
                                                        If you click <em>Proceed</em> the user will be granted access to the dashboard with 
                                                        the credentials you just created. He will also be able to log events.
                                                    </span>
                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-primary" @onclick="() => Promote(person)" data-bs-dismiss="modal">Proceed</button>
                                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Abort</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    private List<Country> AllCountries = new();
    private bool Loaded = false;
    private Guid CountryId = Guid.Empty;
    private Guid StoreId = Guid.Empty;
    private List<PersonViewModel> People = new();

    protected override async Task OnInitializedAsync() {
        AllCountries = await dbContext.Countries.Include(x => x.Stores).ToListAsync();
        Loaded = true;
    }

    private async Task CountryValueChanged(Guid newCountry) {
        CountryId = newCountry;
        StoreId = Guid.Empty;
    }

    private async Task StoreValueChanged(Guid newStore) {
        StoreId = newStore;
        await OnChange();
    }

    private async Task OnChange() {
        People = new();
        if (CountryId == Guid.Empty || StoreId == Guid.Empty) {
            return;
        }

        People = await dbContext.People.Include(x => x.Store).Include(x => x.User).Where(x => x.Store.Id == StoreId).Select(x => new PersonViewModel {
            Person = x,
            CountryId = CountryId,
            StoreId = StoreId,
            BackupFirstName = x.FirstName,
            BackupLastName = x.LastName,
        }).ToListAsync();
    }

    private async Task UpdatePerson(PersonViewModel person) {
        if (person.CountryId == Guid.Empty || person.StoreId == Guid.Empty) {
            await js.InvokeVoidAsync("createToast", Guid.NewGuid(), string.Format("When changing the store, be sure to select both the country and store correctly! One of them wasn't selected"), "danger");
            return;
        }

        if (string.IsNullOrEmpty(person.Person.FirstName) || string.IsNullOrEmpty(person.Person.LastName)) {
            await js.InvokeVoidAsync("createToast", Guid.NewGuid(), "Both FirstName and LastName are required for a person", "danger");
            person.Person.FirstName = person.BackupFirstName;
            person.Person.LastName = person.BackupLastName;
            await OnChange();
            return;
        }

        var newStore = AllCountries.First(x => x.Id == person.CountryId).Stores.First(x => x.Id == person.StoreId);
        if (newStore.Id == person.Person.Store.Id) {
            await js.InvokeVoidAsync("createToast", Guid.NewGuid(), string.Format("Person {0} {1} is already a member of that store", person.Person.FirstName, person.Person.LastName), "warning");
            // No changes made
            return;
        }
        var onlyPerson = person.Person;
        onlyPerson.Store = newStore;
        dbContext.People.Update(onlyPerson);
        await dbContext.SaveChangesAsync();
        await js.InvokeVoidAsync("createToast", Guid.NewGuid(), string.Format("Person {0} {1} has been moved to {2} ({3})", person.Person.FirstName, person.Person.LastName, newStore.Name, newStore.Country.Name), "success");
        await OnChange();
    }

    private async Task Demote(PersonViewModel person) {
        if (person.Person.User == null) {
            await js.InvokeVoidAsync("createToast", Guid.NewGuid(), string.Format("Person {0} {1} is not a note taker at the moment.", person.Person.FirstName, person.Person.LastName), "danger");
            return;
        }

        dbContext.Users.Remove(person.Person.User);
        person.Person.User = null;
        dbContext.People.Update(person.Person);

        await dbContext.SaveChangesAsync();
        await js.InvokeVoidAsync("createToast", Guid.NewGuid(), string.Format("Person {0} {1} is no longer a note taker.", person.Person.FirstName, person.Person.LastName), "success");
        await OnChange();
    }
    
    private async Task Promote(PersonViewModel person) {
        if (person.Person.User != null) {
            await js.InvokeVoidAsync("createToast", Guid.NewGuid(), string.Format("Person {0} {1} already has access to the portal and can log events.", person.Person.FirstName, person.Person.LastName), "danger");
            return;
        }

        var error = new StringBuilder();
        if (string.IsNullOrEmpty(person.Email)) {
            error.Append("Email is requred!");
        }
        if (string.IsNullOrEmpty(person.Password)) {
            if (error.Length != 0) {
                error.AppendLine();
            }
            error.Append("Password is required!");
        }

        if (error.Length != 0) {
            await js.InvokeVoidAsync("createToast", Guid.NewGuid(), error.ToString(), "danger");
            return;
        }

        var user = Activator.CreateInstance<ApplicationUser>();

        await userStore.SetUserNameAsync(user, person.Email, CancellationToken.None);
        var emailStore = (IUserEmailStore<ApplicationUser>)userStore;
        await emailStore.SetEmailAsync(user, person.Email, CancellationToken.None);

        user.EmailConfirmed = true;

        var result = await userManager.CreateAsync(user, person.Password);

        if (!result.Succeeded)
        {
            await js.InvokeVoidAsync("createToast", Guid.NewGuid(), string.Format("Failed to create user for person. Received errors: {0}", string.Join(", ", result.Errors)), "danger");
            return;
        }

        person.Person.User = user;
        dbContext.People.Update(person.Person);
        await dbContext.SaveChangesAsync();

        await js.InvokeVoidAsync("createToast", Guid.NewGuid(), string.Format("Successfully promoted {0} {1} into a note taker. He/She can log in using the email {2} and a password you just setup!", person.Person.FirstName, person.Person.LastName, person.Email), "success");
        
        await OnChange();
    }

    private async Task Delete(PersonViewModel person) {
        if (person.Person.User != null) {
            dbContext.Users.Remove(person.Person.User);
        }

        var eventLogs = await dbContext.EventLogs.Include(x => x.Person).Where(x => x.Person.Id == person.Person.Id).ToListAsync();
        dbContext.EventLogs.RemoveRange(eventLogs);

        dbContext.People.Remove(person.Person);
        await dbContext.SaveChangesAsync();
        await js.InvokeVoidAsync("createToast", Guid.NewGuid(), string.Format("Successfully deleted {0} {1} and all the logs assosiated with that person. You will no longer see him any of the views.", person.Person.FirstName, person.Person.LastName), "success");
        await OnChange();
    }

    public class PersonViewModel {
        public Person Person { get; set; } = new();
        public Guid CountryId { get; set; } = Guid.Empty;
        public Guid StoreId { get; set; } = Guid.Empty;

        public string BackupFirstName { get; set; }
        public string BackupLastName { get; set; }

        public void CountryChanged(Guid newCountry) {
            CountryId = newCountry;
            StoreId = Guid.Empty;
        }

        public string Email { get; set; }
        public string Password { get; set; }
    }
}
