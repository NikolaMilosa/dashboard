@page "/storeLogs"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using dashboard.Components.Account
@using dashboard.Data
@using Microsoft.EntityFrameworkCore

@inject ApplicationDbContext dbContext;
@inject IdentityRedirectManager redirectManager;
@inject IJSRuntime js;

@attribute [Authorize(Roles = "admin")]
@attribute [StreamRendering]

<PageTitle>Store logs</PageTitle>
<h1>Stores logs</h1>
<div class="row">
    <div class="col-md-4">
        <div class="form-floating mb-3">
            <InputDate
            TValue="DateOnly"
            Value="@date"
            ValueChanged="OnDateChange"
            ValueExpression="@(() => date)"
            class="form-control"
            />
        </div>
        <div class="form-floating mb-3">
            @if(!Loaded) {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            } else {
                <InputSelect
                TValue="Guid"
                Value="@SelectedCountryId"
                ValueChanged="OnCountryChange"
                ValueExpression="@(() => SelectedCountryId)"
                class="form-control" aria-required="true" >
                    <option value="@Guid.Empty">Select country</option>
                    @foreach(var country in AllCountries) {
                        <option value="@country.Id">@country.Name</option>
                    }
                </InputSelect>
                <label for="country" class="form-label">Country</label>
            }
        </div>
        <div class="form-floating mb-3">
            @if(!Loaded) {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            } else {
                <InputSelect
                TValue="Guid"
                Value="@SelectedStoreId"
                ValueChanged="OnStoreChange"
                ValueExpression="@(() => SelectedStoreId)"
                class="form-control" aria-required="true" >
                    <option value="@Guid.Empty">Select Store</option>
                    @if(SelectedCountryId != Guid.Empty) {
                        @foreach(var store in AllCountries.First(x => x.Id == SelectedCountryId).Stores) {
                            <option value="@store.Id">@store.Name</option>
                        }
                    }
                </InputSelect>
                <label for="store" class="form-label">Store</label>
            }
        </div>
    </div>
</div>
<hr/>
<div class="col-md-12">
    @if(!RenderedStoreLogs) {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    } else if (personEvents.Count == 0) {
        <h3>No entries found.</h3>
    } else {
        <table class="table">
            <thead>
                <th class="col-1">First name</th>
                <th class="col-1">Last name</th>
                <th class="col-1">Events</th>
            </thead>
            <tbody>
                @foreach (var person in personEvents) {
                    <tr>
                        <td>@person.person.FirstName</td>
                        <td>@person.person.LastName</td>
                        <td>
                            <ul>
                                @foreach(var entry in person.eventLogs) {
                                    <li class="text-wrap">@if (!string.IsNullOrEmpty(entry.Description)){
                                            <span style="margin-right: 3px; cursor: pointer;" data-bs-toggle="modal" data-bs-target="#id_@entry.Id">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-exclamation-circle" viewBox="0 0 20 20" >
                                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16"/>
                                                <path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0M7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0z"/>
                                            </svg>
                                            </span>

                                            <!-- Modal -->
                                            <div class="modal fade" id="id_@entry.Id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
                                                <div class="modal-dialog">
                                                    <div class="modal-content">
                                                    <div class="modal-header">
                                                        <h5 class="modal-title" id="staticBackdropLabel">Description</h5>
                                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                    </div>
                                                    <div class="modal-body">
                                                        <dl class="row">
                                                            <dt class="col-sm-3">Time</dt>
                                                            <dd class="col-sm-9">@entry.Timestamp.ToLocalTime().ToString("HH:mm:ss dd/MM/yyyy")</dd>

                                                            <dt class="col-sm-3">Type</dt>
                                                            <dd class="col-sm-9">@entry.LogType.GetDisplayName()</dd>

                                                            <dt class="col-sm-3">Description</dt>
                                                            <dd class="col-sm-9">@entry.Description</dd>
                                                        </dl>
                                                    </div>
                                                    </div>
                                                </div>
                                            </div>
                                        } <span>@entry.Timestamp.ToLocalTime().ToString("HH:mm:ss"), @entry.LogType.GetDisplayName()</span>
                                            @if(DateTime.Now.Date <= entry.Timestamp.ToLocalTime() && entry.Timestamp.ToLocalTime() < DateTime.Now.Date.AddDays(1)) {
                                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-trash" viewBox="0 0 20 20" style="cursor: pointer;" @onclick="() => DeleteLog(entry.Id)">
                                                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
                                                    <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"/>
                                                </svg>
                                            }
                                    </li>
                                }
                            </ul>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private bool Loaded = false;
    private List<Country> AllCountries = new();

    private Guid SelectedCountryId = Guid.Empty;
    private Guid SelectedStoreId = Guid.Empty;

    private bool RenderedStoreLogs = true;
    private List<PersonWithEventsViewModel> personEvents = new();

    private DateOnly date = DateOnly.FromDateTime(DateTime.Now);

    protected override async Task OnInitializedAsync() {
        AllCountries = await dbContext.Countries.Include(x => x.Stores).ThenInclude(x => x.People).ToListAsync();
        Loaded = true;
    }

    private async Task OnCountryChange(Guid newCountry) {
        SelectedCountryId = newCountry;
        await OnStoreChange(Guid.Empty);
    }

    private async Task OnStoreChange(Guid newStore) {
        SelectedStoreId = newStore;
        await UpdatePeople();
    }

    private async Task OnDateChange(DateOnly newDate) {
        date = newDate;
        await UpdatePeople();
    }

    private async Task UpdatePeople() {
        RenderedStoreLogs = false;
        personEvents = AllCountries.First(x => x.Id == SelectedCountryId).Stores.First(x => x.Id == SelectedStoreId).People.Select(x => new PersonWithEventsViewModel {
            person = x,
            eventLogs = new()
        }).ToList();

        var personIds = personEvents.Select(x => x.person.Id).ToList();
        var tomorrow = date.AddDays(1);
        var allEvents = await dbContext.EventLogs.Include(x => x.Person).Where(x => personIds.Contains(x.Person.Id) && date.ToDateTime(new TimeOnly()).ToUniversalTime() <= x.Timestamp && x.Timestamp < tomorrow.ToDateTime(new TimeOnly()).ToUniversalTime()).ToListAsync();
        foreach(var personEvent in personEvents) {
            personEvent.eventLogs = allEvents.Where(x => x.Person.Id == personEvent.person.Id).ToList();
        }

        RenderedStoreLogs = true;
    }

    private async Task DeleteLog(Guid id) {
        var today = DateTime.Now.Date;
        var tomorrow = today.AddDays(1);
        var foundEvent = await dbContext.EventLogs.Include(x => x.Person).FirstOrDefaultAsync(x => x.Id == id);
        if (foundEvent == null) {
            return;
        }

        if (!(today.ToUniversalTime() <= foundEvent.Timestamp && foundEvent.Timestamp < tomorrow.ToUniversalTime())) {
            return;
        }

        if (foundEvent.LogType == LogType.CheckIn) {
            // Delete also next checkout if exists
            var nextCheckout = await dbContext.EventLogs.FirstOrDefaultAsync(x => foundEvent.Timestamp < x.Timestamp && x.LogType == LogType.CheckOut && x.Timestamp < tomorrow.ToUniversalTime() && x.Person.Id == foundEvent.Person.Id);
            if (nextCheckout != null) {
                dbContext.EventLogs.Remove(nextCheckout);
            }
        } else if (foundEvent.LogType == LogType.CheckOut) {
            // Delete also prevous checkin
            var previousCheckIn = await dbContext.EventLogs.FirstAsync(x => today.ToUniversalTime() <= x.Timestamp && x.LogType == LogType.CheckIn && x.Timestamp < foundEvent.Timestamp && x.Person.Id == foundEvent.Person.Id);
            dbContext.EventLogs.Remove(previousCheckIn);
        }

        dbContext.EventLogs.Remove(foundEvent);
        await dbContext.SaveChangesAsync();
        await js.InvokeVoidAsync("createToast", id, string.Format("Removed event for {0} {1} at {2}", foundEvent.Person.FirstName, foundEvent.Person.LastName, foundEvent.Timestamp.ToLocalTime()), "warning");
        await UpdatePeople();
    }

    private class PersonWithEventsViewModel {
        public Person person { get; set; } = new();
        public List<Log> eventLogs { get; set; } = new();
    }
}
