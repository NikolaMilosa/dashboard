@page "/viewLogs"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using dashboard.Components.Account
@using dashboard.Data
@using Microsoft.EntityFrameworkCore

@inject ApplicationDbContext dbContext
@attribute [Authorize(Roles = "admin")]
@attribute [StreamRendering]

<PageTitle>View Logs</PageTitle>

<h1>View logs</h1>
@if (!Loaded) {
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
} else {

<div class="row">
    <div class="col-md-4">
        <div class="form-floating mb-3">
            <InputSelect 
            TValue="Guid"
            Value="@SelectedCountry"
            ValueChanged="OnCountryChange"
            ValueExpression="@(() => SelectedCountry)"
            class="form-control" aria-required="true" >
                <option value="@Guid.Empty">Select country</option>
                @foreach(var country in AllCountries) {
                    <option value="@country.Id">@country.Name</option>
                }
            </InputSelect>
            <label for="country" class="form-label">Country</label>
        </div>
    </div>
    <div class="col-md-4">
        <div class="form-floating mb-3">
            <InputSelect
            TValue="Guid"
            Value="@SelectedStore"
            ValueChanged="OnStoreChange"
            ValueExpression="@(() => SelectedStore)"
            class="form-control" >
                @if(SelectedCountry != Guid.Empty) {
                    <option value="@Guid.Empty">Select Store</option>
                    @foreach(var store in AllCountries.First(x => x.Id == SelectedCountry).Stores) {
                        <option value="@store.Id">@store.Name</option>
                    }
                }
            </InputSelect>
            <label for="store" class="form-label">Store</label>
        </div>
    </div>
    <div class="col-md-4">
        <div class="form-floating mb-3">
            <InputSelect
            TValue="Guid"
            Value="@SelectedPerson"
            ValueChanged="OnPersonChange"
            ValueExpression="@(() => SelectedPerson)"
            class="form-control" >
                @if(SelectedCountry != Guid.Empty && SelectedStore != Guid.Empty) {
                    <option value="@Guid.Empty">Select Person</option>
                    @foreach(var person in AllCountries.First(x => x.Id == SelectedCountry).Stores.First(x => x.Id == SelectedStore).People) {
                        <option value="@person.Id">@person.FirstName @person.LastName</option>
                    }
                }
            </InputSelect>
            <label for="store" class="form-label">Person</label>
        </div>
    </div>
</div>
<hr/>
<div class="row">
    <div class="col-md-12">
        <div class="row">
            <div class="col-md-4">
                <h4>@MonthAndYear</h4>
            </div>
        </div>
        <div class="row">
            <div class="col-md-1">
                <button class="btn btn-secondary" @onclick="PreviousMonth">&lt;</button>
            </div>
            <div class="col-md-1">
                <button class="btn btn-secondary" @onclick="NextMonth">&gt;</button>
            </div>
        </div>
        <hr/>
        <table class="table">
            <thead>
                <th class="col-1" scope="col">Sunday</th>
                <th class="col-1" scope="col">Monday</th>
                <th class="col-1" scope="col">Tuesday</th>
                <th class="col-1" scope="col">Wednesday</th>
                <th class="col-1" scope="col">Thursday</th>
                <th class="col-1" scope="col">Friday</th>
                <th class="col-1" scope="col">Saturday</th>
            </thead>
            <tbody>
                @if(Calendar.Count != 0) {
                    @for(int i = 0; i < 5; i++) {
                        <tr>
                            @for(int j = 0; j < 7; j++){
                                <td>
                                    <div class="col-md-12">
                                        @GetSingleDateEntry(i, j)
                                    </div>
                                </td>
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>
<div class="row">
    <div class="col-md-6 col-sm-12">
        <h3>Overview: </h3>
        <table class="table">
            <thead>
                <th class="col-1" scope="col">Log type</th>
                <th class="col-1" scope="col">Summed up</th>
            </thead>
            <tbody>
                <tr>
                    <td>Woked</td>
                    @GetWorkedHours()
                </tr>
                <tr>
                    <td>Vacations</td>
                    @GetVacationDays()
                </tr>
                <tr>
                    <td>Sick leave</td>
                    @GetSickLeave()
                </tr>
                <tr>
                    <td>Unpaid</td>
                    @GetUnpaidLeave()
                </tr>
                <tr>
                    <td>Paid</td>
                    @GetPaidLeave()
                </tr>
            </tbody>
        </table>
    </div>
</div>
}

@code {
    private List<Country> AllCountries = new();

    private bool Loaded = false;
    
    private Guid SelectedCountry = Guid.Empty;
    private Guid SelectedStore = Guid.Empty;
    private Guid SelectedPerson = Guid.Empty;


    private DateOnly FirstDay = new DateOnly(DateTime.Now.Date.Year, DateTime.Now.Date.Month, 1);
    private string MonthAndYear => FirstDay.ToString("MMMM, yyyy");
    private DateOnly LastDay => FirstDay.AddMonths(1);
    private List<SingleDateEntry> Calendar = new();

    private async Task OnCountryChange(Guid newCountryId) {
        SelectedCountry = newCountryId;
        await OnStoreChange(Guid.Empty);
    }

    private async Task OnStoreChange(Guid newStoreId) {
        SelectedStore = newStoreId;
        await OnPersonChange(Guid.Empty);
    }

    private async Task OnPersonChange(Guid newPersonId) {
        SelectedPerson = newPersonId;
        await UpdateCalendar();
    }

    protected override async Task OnInitializedAsync() {
        AllCountries = await dbContext.Countries.Include(x => x.Stores).ThenInclude(x => x.People).ToListAsync();
        Loaded = true;
        await UpdateCalendar();
    }

    private async Task UpdateCalendar() {
        Calendar = new List<SingleDateEntry>();
        var firstDay = FirstDay.ToDateTime(new TimeOnly());
        var lastDay = LastDay.ToDateTime(new TimeOnly());
        
        for (int i = 0; i < (int)FirstDay.DayOfWeek; i++) {
            Calendar.Add(new SingleDateEntry() {
                Date = firstDay.AddDays(i - (int)firstDay.DayOfWeek)
            });
        }
        for (int i = 0; i < DateTime.DaysInMonth(FirstDay.Year, FirstDay.Month); i++) {
            Calendar.Add(new SingleDateEntry() {
                Date = firstDay.AddDays(i)
            });
        }
        for (int i = DateTime.DaysInMonth(FirstDay.Year, FirstDay.Month); i < 35; i++) {
            Calendar.Add(new SingleDateEntry() {
                Date = firstDay.AddDays(i)
            });
        }

        if (SelectedPerson == Guid.Empty) {
            return;
        }

        var eventLogsForMonth = await dbContext.EventLogs.Include(x => x.Person).Where(x => x.Person.Id == SelectedPerson && firstDay.ToUniversalTime() <= x.Timestamp && x.Timestamp < lastDay.ToUniversalTime()).ToListAsync();
        foreach (var day in Calendar) {
            var beginning = day.Date.Date;
            var tomorrow = beginning.AddDays(1);
            day.EventLogs = eventLogsForMonth.Where(x => beginning.ToUniversalTime() <= x.Timestamp && x.Timestamp < tomorrow.ToUniversalTime()).OrderBy(x => x.Timestamp).ToList();
        }

    }

    private RenderFragment GetSingleDateEntry(int i, int j) {
        var offset = i * 7 + j;
        if (Calendar.Count <= offset) {
            return @<div class="row">Not found</div>;
        }

        var current = Calendar[offset];

        return @<div class="col-md-12">
            <div class="row">@current.Date.ToString("dd")</div>
            <ul>
                @foreach(var entry in current.EventLogs) {
                    <li class="text-wrap">
                            <span style="margin-right: 3px; cursor: pointer;" data-bs-toggle="modal" data-bs-target="#id_@entry.Id">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-exclamation-circle" viewBox="0 0 20 20" >
  <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16"/>
  <path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0M7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0z"/>
</svg>
                            </span>

                            <!-- Modal -->
                            <div class="modal fade" id="id_@entry.Id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="staticBackdropLabel">Description</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <dl class="row">
                                            <dt class="col-sm-3">Time</dt>
                                            <dd class="col-sm-9">@entry.Timestamp.ToLocalTime().ToString("HH:mm:ss dd/MM/yyyy")</dd>

                                            <dt class="col-sm-3">Type</dt>
                                            <dd class="col-sm-9">@entry.LogType.GetDisplayName()</dd>

                                            <dt class="col-sm-3">Description</dt>
                                            <dd class="clo-sm-9">
                                                 <InputTextArea DisplayName="Description"  class="form-control" @bind-Value="entry.Description" />
                                            </dd>
                                        </dl>
                                    </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-primary" @onclick="SaveDescription" data-bs-dismiss="modal">Save changes</button>
                                            </div>
                                    </div>
                                </div>
                            </div>
                         @entry.Timestamp.ToLocalTime().ToString("HH:mm:ss"), @entry.LogType.GetDisplayName()</li>
                }
            </ul>
            
        </div>;
    }

    private async Task SaveDescription() {
        await dbContext.SaveChangesAsync();
    }

    private RenderFragment GetWorkedHours() {
        var totalSum = new TimeSpan();

        foreach (var entry in Calendar.Where(x => x.EventLogs.Count != 0 && x.EventLogs.FirstOrDefault(y => y.LogType == LogType.CheckIn || y.LogType == LogType.CheckOut) != null)) {
            for (int i = 0; i < entry.EventLogs.Count; i += 2) {
                var first = entry.EventLogs[i];
                if (entry.EventLogs.Count <= i + 1) {
                    // Not checked out for this day which
                    // is invalid so skipping.
                    continue;
                }
                var last = entry.EventLogs[i + 1];
                var curr = last.Timestamp.Subtract(first.Timestamp);
                totalSum = totalSum.Add(curr);
            }
        }


        return @<td>@((int) totalSum.TotalHours)h @(totalSum.Minutes)min @(totalSum.Seconds)s</td>;
    }

    private RenderFragment GetVacationDays() {
        var totalVacationDays = Calendar.Count(x => x.EventLogs.Count != 0 && x.EventLogs.FirstOrDefault(y => y.LogType == LogType.Vacation) != null);

        return @<td>@totalVacationDays days</td>;
    }

    private RenderFragment GetSickLeave() {
        var totalSickLeaveDays = Calendar.Count(x => x.EventLogs.Count != 0 && x.EventLogs.FirstOrDefault(y => y.LogType == LogType.SickLeave) != null);

        return @<td>@totalSickLeaveDays days</td>;
    }

    private RenderFragment GetUnpaidLeave() {
        var totalUnpaidLeaveDays = Calendar.Count(x => x.EventLogs.Count != 0 && x.EventLogs.FirstOrDefault(y => y.LogType == LogType.UnpaidLeave) != null);

        return @<td>@totalUnpaidLeaveDays days</td>;
    }

    private RenderFragment GetPaidLeave() {
        var totalPaidLeaveDays = Calendar.Count(x => x.EventLogs.Count != 0 && x.EventLogs.FirstOrDefault(y => y.LogType == LogType.PaidLeave) != null);

        return @<td>@totalPaidLeaveDays days</td>;
    }

    private async Task NextMonth() {
        FirstDay = FirstDay.AddMonths(1);
        await UpdateCalendar();
    }

    private async Task PreviousMonth() {
        FirstDay = FirstDay.AddMonths(-1);
        await UpdateCalendar();
    }

    private class SingleDateEntry {
        public DateTime Date { get; set; }
        public List<Log> EventLogs { get; set; } = new();
    }
}
