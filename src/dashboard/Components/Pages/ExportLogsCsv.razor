@page "/exportLogsCsv"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using dashboard.Components.Account
@using dashboard.Data
@using Microsoft.EntityFrameworkCore

@inject IJSRuntime JS
@inject ApplicationDbContext dbContext;
@inject IWebHostEnvironment env;
@inject ILogger<ExportLogsCsv> logger;
@attribute [Authorize(Roles = "admin")]
@attribute [StreamRendering]

<PageTitle>Export logs as csv</PageTitle>
<script>
  window.triggerFileDownload = (fileName, url) => {
    const anchorElement = document.createElement('a');
    anchorElement.href = url;
    anchorElement.download = fileName ?? '';
    anchorElement.click();
    anchorElement.remove();
  }
</script>
<h1>Export logs for a country as csv</h1>
<hr />
@if (!Loaded) {
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
} else if (DownloadingFile) {
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
} else {
    <div class="row">
        <div class="col-md-4">
            <div class="form-floating mb-3">
                <h4>@MonthAndYear</h4>
            </div>
            <div class="row mb-3">
                <div class="col-md-2">
                    <button class="btn btn-secondary" @onclick="PreviousMonth">&lt;</button>
                </div>
                <div class="col-md-2">
                    <button class="btn btn-secondary" @onclick="NextMonth">&gt;</button>
                </div>
            </div>
            <div class="form-floating mb-3">
                <InputSelect 
                @bind-Value="SelectedCountryId"
                class="form-control" aria-required="true" >
                    <option value="@Guid.Empty">Select country</option>
                    @foreach(var country in AllCountries) {
                        <option value="@country.Id">@country.Name</option>
                    }
                </InputSelect>
                <label for="country" class="form-label">Country</label>
            </div>
            <div>
                <button class="w-100 btn btn-lg btn-primary mb-3" @onclick="ExportFileFromUrl">Export</button>
            </div>
            <div>
                <button class="w-100 btn btn-lg btn-primary" @onclick="ExportWorkingDays">Export working days</button>
            </div>
        </div>
    </div>
}

@code {
    private Guid SelectedCountryId;
    private List<Country> AllCountries = new();

    private bool Loaded = false;
    private bool DownloadingFile = false;

    private DateOnly FirstDay = new DateOnly(DateTime.Now.Date.Year, DateTime.Now.Date.Month, 1);
    private string MonthAndYear => FirstDay.ToString("MMMM, yyyy");

    protected override async Task OnInitializedAsync() {
        AllCountries = await dbContext.Countries.Include(x => x.Stores).ThenInclude(x => x.People).ToListAsync();

        foreach(var previouslyGeneratedCsv in Directory.GetFiles(Path.Combine(env.WebRootPath, "files"), "*.csv")) {
            try {
                File.Delete(previouslyGeneratedCsv);
                logger.LogInformation("Successfully deleted {0}", previouslyGeneratedCsv);
            } catch (Exception e) {
                logger.LogWarning("Failed to delete {0}. Reason: {1}", previouslyGeneratedCsv, e.Message);
            }
        }

        Loaded = true;
    }

    private async Task ExportFileFromUrl() {
        DownloadingFile = true;
        var country = AllCountries.First(x => x.Id == SelectedCountryId);
        
        var request = Guid.NewGuid();
        var fileName = string.Format("{0}-{1}.csv", country.Name.Trim().Replace(" ", "_"), FirstDay.ToString("MMMM"));
        var fileUrl = string.Format("/files/{0}", FormatRequest(request));

        await AggregateData(country, request);

        await JS.InvokeVoidAsync("triggerFileDownload", fileName, fileUrl);
        DownloadingFile = false;
    }

    private async Task ExportWorkingDays() {
        DownloadingFile = true;
        var country = AllCountries.First(x => x.Id == SelectedCountryId);
        
        var request = Guid.NewGuid();
        var fileName = string.Format("WorkingDays-{0}-{1}.csv", country.Name.Trim().Replace(" ", "_"), FirstDay.ToString("MMMM"));
        var fileUrl = string.Format("/files/{0}", FormatRequest(request));

        await AggregateDataWorkingDays(country, request);

        await JS.InvokeVoidAsync("triggerFileDownload", fileName, fileUrl);
        DownloadingFile = false;
    }

    private string FormatRequest(Guid request) {
        return request.ToString().Replace("-", "") + ".csv";
    }

    private string GetPath(Guid request) {
        return Path.Combine(env.WebRootPath, "files", FormatRequest(request));
    }

    private async Task AggregateData(Country country, Guid request) {
        var allPeopleInCountry = country.Stores.SelectMany(x => x.People).ToList();
        var allPeopleId = allPeopleInCountry.Select(x => x.Id).ToList();

        var firstDay = FirstDay.ToDateTime(new TimeOnly());
        var lastDay = firstDay.AddMonths(1);

        var eventLogs = await dbContext.EventLogs.Include(x => x.Person).Where(x => allPeopleId.Contains(x.Person.Id) && firstDay.ToUniversalTime() <= x.Timestamp && x.Timestamp < lastDay.ToUniversalTime()).ToListAsync();

        await using(var fileSteram = new FileStream(GetPath(request), FileMode.CreateNew, FileAccess.Write, FileShare.None, 4096, FileOptions.Asynchronous))
        await using(var writer = new StreamWriter(fileSteram)) {
            var generatedMonth = new List<DateOnly>();
            var counter = firstDay.Date;
            while (counter != lastDay) {
                generatedMonth.Add(DateOnly.FromDateTime(counter));
                counter = counter.AddDays(1);
            }
            
            var daysHeader = string.Join(", ", generatedMonth.Select(x => x.ToString("dd.MM.yyyy")));

            await writer.WriteLineAsync("first name, last name, total worked hours, minutes, seconds, vacations (days), sick leaves (days), unpaid (days), payed (days), " + daysHeader);

            foreach(var person in allPeopleInCountry) {
                var currentLine = GetLineForSinglePerson(person, eventLogs, firstDay, lastDay);
                await writer.WriteLineAsync(currentLine);
            }
        }
    }

    private string GetLineForSinglePerson(Person person, List<Log> nonFilteredLogs, DateTime firstDate, DateTime lastDate) {
        var logsForPerson = nonFilteredLogs.Where(x => x.Person.Id == person.Id).OrderBy(x => x.Timestamp).ToList();

        var sumForDay = new Dictionary<DateOnly, string>();

        var vacations = 0;
        var sick = 0;
        var unpaid = 0;
        var payed = 0;

        var total = new TimeSpan();
        if (logsForPerson.Count > 0) {
            while(firstDate < lastDate) {
                var next = firstDate.AddDays(1);

                var eventsForDay = logsForPerson.Where(x => firstDate <= x.Timestamp && x.Timestamp < next).ToList();

                if (eventsForDay.Count == 1) {
                    var onlyEvent = eventsForDay.First();
                    switch (onlyEvent.LogType) {
                        case LogType.SickLeave:
                            sick += 1;
                            sumForDay[DateOnly.FromDateTime(firstDate)] = string.Format("8h (BO)");
                            break;
                        case LogType.PaidLeave:
                            payed += 1;
                            sumForDay[DateOnly.FromDateTime(firstDate)] = string.Format("8h (PO)");
                            break;
                        case LogType.UnpaidLeave:
                            unpaid += 1;
                            sumForDay[DateOnly.FromDateTime(firstDate)] = string.Format("8h (NPO)");
                            break;
                        case LogType.Vacation:
                            vacations += 1;
                            sumForDay[DateOnly.FromDateTime(firstDate)] = string.Format("8h (GOD)");
                            break;
                    }
                } else {
                    var currForDay = new TimeSpan();
                    for (int i = 0; i < eventsForDay.Count; i += 2) {
                        var first = eventsForDay[i];
                        if (eventsForDay.Count <= i + 1) {
                            // Non checked out day, skipping
                            continue;
                        }
                        var second = eventsForDay[i + 1];
                        var curr = second.Timestamp.Subtract(first.Timestamp);
                        currForDay = currForDay.Add(curr);
                    }

                    sumForDay[DateOnly.FromDateTime(firstDate)] = string.Format("{0}h {1}m {2}s", currForDay.Hours, currForDay.Minutes, currForDay.Seconds);
                    total = total.Add(currForDay);
                }
                firstDate = next;
            }
        }

        var perDay = string.Join(", ", sumForDay.OrderBy(x => x.Key).Select(x => x.Value));

        return string.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9}", person.FirstName, person.LastName, (int)total.TotalHours, total.Minutes, total.Seconds, vacations, sick, unpaid, payed, perDay);
    }

    private async Task AggregateDataWorkingDays(Country country, Guid request) {
        var allPeopleInCountry = country.Stores.SelectMany(x => x.People).ToList();
        var allPeopleId = allPeopleInCountry.Select(x => x.Id).ToList();

        var firstDay = FirstDay.ToDateTime(new TimeOnly());
        var lastDay = firstDay.AddMonths(1);

        var eventLogs = await dbContext.EventLogs.Include(x => x.Person).Where(x => allPeopleId.Contains(x.Person.Id) && firstDay.ToUniversalTime() <= x.Timestamp && x.Timestamp < lastDay.ToUniversalTime()).ToListAsync();

        await using(var fileSteram = new FileStream(GetPath(request), FileMode.CreateNew, FileAccess.Write, FileShare.None, 4096, FileOptions.Asynchronous))
        await using(var writer = new StreamWriter(fileSteram)) {
            var generatedMonth = new List<DateOnly>();
            var counter = firstDay.Date;
            while (counter != lastDay) {
                generatedMonth.Add(DateOnly.FromDateTime(counter));
                counter = counter.AddDays(1);
            }
            
            var daysHeader = string.Join(", ", generatedMonth.Select(x => x.ToString("dd.MM.yyyy")));

            await writer.WriteLineAsync("first name, last name, total working days, " + daysHeader);

            foreach(var person in allPeopleInCountry) {
                var currentLine = GetWorkingLineForPerson(person, eventLogs, firstDay, lastDay);
                await writer.WriteLineAsync(currentLine);
            }
        }
    }

    private string GetWorkingLineForPerson(Person person, List<Log> nonFilteredLogs, DateTime firstDate, DateTime lastDate) {
        var logsForPerson = nonFilteredLogs.Where(x => x.Person.Id == person.Id).OrderBy(x => x.Timestamp).ToList();

        var sumForDay = new Dictionary<DateOnly, string>();

        var workingDays = 0;
        var acceptedWorkingDay = new TimeSpan(7,45,0);

        if (logsForPerson.Count > 0) {
            while(firstDate < lastDate) {
                var next = firstDate.AddDays(1);

                var eventsForDay = logsForPerson.Where(x => firstDate <= x.Timestamp && x.Timestamp < next).ToList();

                if (eventsForDay.Count == 1) {
                    var onlyEvent = eventsForDay.First();
                    switch (onlyEvent.LogType) {
                        case LogType.SickLeave:
                            sumForDay[DateOnly.FromDateTime(firstDate)] = string.Format("BO");
                            break;
                        case LogType.PaidLeave:
                            sumForDay[DateOnly.FromDateTime(firstDate)] = string.Format("PO");
                            break;
                        case LogType.UnpaidLeave:
                            sumForDay[DateOnly.FromDateTime(firstDate)] = string.Format("NPO");
                            break;
                        case LogType.Vacation:
                            sumForDay[DateOnly.FromDateTime(firstDate)] = string.Format("GOD");
                            break;
                    }
                } else {
                    var currForDay = new TimeSpan();
                    for (int i = 0; i < eventsForDay.Count; i += 2) {
                        var first = eventsForDay[i];
                        if (eventsForDay.Count <= i + 1) {
                            // Non checked out day, skipping
                            continue;
                        }
                        var second = eventsForDay[i + 1];
                        var curr = second.Timestamp.Subtract(first.Timestamp);
                        currForDay = currForDay.Add(curr);
                    }

                    if (currForDay > acceptedWorkingDay) {
                        workingDays += 1;
                    }
                    sumForDay[DateOnly.FromDateTime(firstDate)] = currForDay != TimeSpan.Zero
                        ? string.Format("{0}:{1}:{2}", currForDay.Hours, currForDay.Minutes, currForDay.Seconds)
                        : "-";
                }
                firstDate = next;
            }
        }

        var perDay = string.Join(", ", sumForDay.OrderBy(x => x.Key).Select(x => x.Value));

        return string.Format("{0},{1},{2},{3}", person.FirstName, person.LastName, workingDays, perDay);
    }

    private void NextMonth() {
        FirstDay = FirstDay.AddMonths(1);
    }

    private void PreviousMonth() {
        FirstDay = FirstDay.AddMonths(-1);
    }
}
