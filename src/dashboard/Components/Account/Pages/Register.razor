@page "/Account/Register"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@using dashboard.Data
@using dashboard.Components.Shared
@using static dashboard.Components.Shared.StatusMessageWithTypes

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject RoleManager<IdentityRole> RoleManager
@inject ApplicationDbContext dbContext

@attribute [Authorize(Policy = "RequireAdministratorRole")]
@attribute [StreamRendering]

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-md-4">
        <StatusMessageWithTypes Message="@status" MessageType="@statusType" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                @if(!Loaded) {
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                } else {
                    <InputSelect @bind-Value="Input.Role" class="form-control">
                        @foreach (var role in Roles) {
                            <option value="@role">@role</option>
                        }
                    </InputSelect>
                    <label for="role">Role</label>
                }
            </div>
            @if (Input.Role == "user") {
                <div class="form-floating mb-3">
                        @if(!Loaded) {
                            <div class="text-center">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        } else {
                            <InputSelect 
                            TValue="Guid"
                            Value="Input.CountryId"
                            ValueChanged="OnCountryChange"
                            ValueExpression="@(() => Input.CountryId)"
                            
                            class="form-control" aria-required="true" >
                                <option value="@Guid.Empty">Select country</option>
                                @foreach(var country in AllCountries) {
                                    <option value="@country.Id">@country.Name</option>
                                }
                            </InputSelect>
                            <label for="country" class="form-label">Country</label>
                        }
                    </div>
                    <div class="form-floating mb-3">
                        @if(!Loaded) {
                            <div class="text-center">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        } else {
                            <InputSelect class="form-control" 
                            TValue="Guid"
                            Value="Input.StoreId"
                            ValueChanged="OnStoreChange"
                            ValueExpression="@(() => Input.StoreId)"
                            >
                                @if(Input.CountryId != Guid.Empty) {
                                    <option value="@Guid.Empty">Select Store</option>
                                    @foreach(var store in AllCountries.First(x => x.Id == Input.CountryId).Stores) {
                                        <option value="@store.Id">@store.Name</option>
                                    }
                                }
                            </InputSelect>
                            <label for="store" class="form-label">Store</label>
                        }
                    </div>
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.FirstName" class="form-control" aria-required="true" placeholder="John" />
                        <label for="firstName">First Name</label>
                    </div>
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.LastName" class="form-control" aria-required="true" placeholder="Doe" />
                        <label for="lastName">Last Name</label>
                    </div>
            }
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
</div>

@code {
    private bool Loaded = false;
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? status { get; set; } = "";
    private StatusType statusType { get; set; } = StatusType.Success;

    private List<string> Roles = new();
    private List<Country> AllCountries = new();

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();
        var errors = new StringBuilder();

        if (Input.Role == "user") {
            if (Input.CountryId == Guid.Empty) {
                errors.Append("Country is mandatory for non admin users!");
            }

            if (Input.StoreId == Guid.Empty) {
                if (errors.Length != 0) {
                    errors.AppendLine();
                }
                errors.Append("Store is mandatory for non admin users!");
            }
            if (Input.FirstName == string.Empty) {
                if (errors.Length != 0) {
                    errors.AppendLine();
                }
                errors.Append("First name is required for non admin users!");
            }
            if (Input.LastName == string.Empty) {
                if (errors.Length != 0){
                    errors.AppendLine();
                }
                errors.Append("Last name is required for non admin users!");
            }
        }

        if (errors.Length != 0) {
            status = errors.ToString();
            statusType = StatusType.Error;
            return;
        }

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            status = string.Join(", ", identityErrors.Select(err => err.Description));
            statusType = StatusType.Error;
            return;
        }

        if (Input.Role != "user") {
            var roleResult = await UserManager.AddToRoleAsync(user, Input.Role);
            if (!roleResult.Succeeded) {
                identityErrors = roleResult.Errors;
                status = string.Join(", ", identityErrors.Select(err => err.Description));
                statusType = StatusType.Error;
                await UserManager.DeleteAsync(user);
                return;
            }
        }

        if (Input.Role == "user") {
            var person = new Person {
                FirstName = Input.FirstName,
                LastName = Input.LastName,
                Store = AllCountries.First(x => x.Id == Input.CountryId).Stores.First(x => x.Id == Input.StoreId),
                User = user
            };

            await dbContext.People.AddAsync(person);
            await dbContext.SaveChangesAsync();
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        RedirectManager.RedirectTo(ReturnUrl);
    }

    protected override async Task OnInitializedAsync() {
        var roles = await RoleManager.Roles.ToListAsync();
        Roles = roles.Select(x => x.Name!).ToList();
        Roles.Add("user");

        AllCountries = await dbContext.Countries.Include(x => x.Stores).ToListAsync();
        Loaded = true;
    }

    public void OnCountryChange(Guid newCountry) {
        Input.CountryId = newCountry;
        Input.StoreId = Guid.Empty;
    }

    public void OnStoreChange(Guid newStore) {
        Input.StoreId = newStore;
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Display(Name = "Role")]
        public string Role { get; set; } = "user";

        public Guid CountryId { get; set; } = Guid.Empty;

        public Guid StoreId { get; set; } = Guid.Empty;
        
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
    }
}
